{"version":3,"sources":["feature-editor/title/Title.js","feature-editor/scenario/steps/Annotation.js","feature-editor/scenario/steps/Text.js","feature-editor/scenario/steps/Step.js","feature-editor/scenario/Scenario.js","FeatureEditor.js","FeatureRenderer.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","handleUpdateFeatureName","updateFeatureName","bind","class","this","keyword","placeholder","defaultValue","title","onBlur","e","target","value","React","Component","Annotation","handleChange","state","annotation","slice","trim","newAnnotation","setState","onAnnotationChange","type","name","list","onChange","id","Text","text","onTextChange","Step","editStepAnnotation","editStepText","step","newStepAst","Object","assign","onEditStep","index","Scenario","onEditScenarioName","editScenarioName","editStep","addStep","scenarioHeader","scenarioSteps","onClick","scenario","steps","map","newScenarioAst","updateFeatureChild","stepAst","scenarioLength","length","lastStep","newStepLocation","location","scenarioLocation","line","column","addNewStepLine","IdGenerator","uuid","argument","undefined","push","FeatureEditor","onUpdateFeatureName","onUpdateFeatureChild","onAddNewScenario","createNewScenario","scenarioList","featureScenarios","sc","className","ast","feature","featureName","children","newName","updatedAst","onAstUpdated","childAst","isOutline","examples","tags","splice","FeatureRenderer","txtDefinition","rows","readonly","App","featureTxt","join","featureAst","computeAst","updateAst","addNewScenario","textDef","newId","gherkinDocument","Parser","AstBuilder","parse","uri","newAst","newTxtDefinition","pretty","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","WebFont","load","google","families"],"mappings":"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","file":"static/js/main.ac3d4cdf.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Title extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleUpdateFeatureName = this.updateFeatureName.bind(this)\n  }\n\n  render() {\n    return (\n      <h1 class=\"editable-title\">\n        <span class=\"gherkin-keyword\">{this.props.keyword}:</span>\n        <input placeholder=\"Empty name\" defaultValue={this.props.title} onBlur={this.handleUpdateFeatureName}/>\n      </h1>\n    )\n  }\n\n  updateFeatureName(e) {\n    this.props.updateFeatureName(e.target.value)\n  }\n}","import React from 'react'\n\nexport default class Annotation extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      value: props.annotation.slice().trim()\n    }\n  }\n\n  handleChange(e) {\n    let newAnnotation = e.target.value\n\n    if (newAnnotation.trim() === \"\") {\n      this.setState({\n        value: this.props.annotation.slice().trim()\n      })\n      return\n    }\n\n    this.setState({\n      value: newAnnotation\n    })\n\n    this.props.onAnnotationChange(newAnnotation)\n  }\n\n  render() {\n    return (\n      <span>\n        <input type=\"text\" value={this.state.value}\n        name=\"annotation\"\n        list=\"annotations\" onChange={e => this.setState({ value: e.target.value })} onBlur={this.handleChange}/>\n\n        <datalist id=\"annotations\">\n          <select>\n            <option value=\"Given\"/>\n            <option value=\"When\"/>\n            <option value=\"And\"/>\n            <option value=\"Then\"/>\n          </select>\n        </datalist>\n      </span>\n    )\n  }\n}","import React from 'react'\n\nexport default class Text extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  render() {\n    return (<span>\n      <input type=\"text\" defaultValue={this.props.text.trim()} name=\"text\" onBlur={this.handleChange}/>\n    </span>)\n  }\n\n  handleChange(e) {\n    this.props.onTextChange(e.target.value)\n  }\n}","import React from 'react'\nimport Annotation from './Annotation'\nimport Text from './Text'\n\nexport default class Step extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.onAnnotationChange = this.editStepAnnotation.bind(this)\n    this.onTextChange = this.editStepText.bind(this)\n  }\n\n  render() {\n    return (\n      <li>\n          <Annotation annotation={this.props.step.keyword} onAnnotationChange={this.onAnnotationChange} />\n          <Text text={this.props.step.text} onTextChange={this.onTextChange}/>\n      </li>\n    )\n  }\n\n  editStepAnnotation(annotation) {\n    const newStepAst = Object.assign(this.props.step)\n    newStepAst.keyword = annotation + ' '\n    this.props.onEditStep(newStepAst, this.props.index)\n  }\n\n  editStepText(text) {\n    const newStepAst = Object.assign(this.props.step)\n    newStepAst.text = text\n    this.props.onEditStep(newStepAst, this.props.index)\n  }\n}","import React from 'react'\nimport ScenarioStep from './steps/Step'\nimport { IdGenerator } from '@cucumber/messages'\n\nexport default class Scenario extends React.Component {\n  constructor(props) {\n    super(props)\n    this.onEditScenarioName = this.editScenarioName.bind(this)\n    this.onEditStep = this.editStep.bind(this)\n    this.addStep = this.addStep.bind(this)\n  }\n\n  render() {\n    return (\n      <li class=\"tile\">\n        {this.scenarioHeader()}\n        <ul>\n          {this.scenarioSteps()}\n          <button class=\"btn--secondary\" onClick={this.addStep}>Add step</button>\n        </ul>\n      </li>\n    )\n  }\n\n  scenarioHeader() {\n    return <h2 class=\"editable-title\">\n      <span class=\"gherkin-keyword\">{this.props.scenario.keyword}:</span>\n      <input placeholder=\"Empty name\" defaultValue={this.props.scenario.name} onBlur={this.onEditScenarioName}/>\n    </h2>\n  }\n\n  scenarioSteps() {\n    return this.props.scenario.steps.map((step, index) =>\n      <ScenarioStep step={step} index={index} onEditStep={this.onEditStep}/>\n    )\n  }\n\n  editScenarioName(e) {\n    let newScenarioAst = Object.assign(this.props.scenario)\n    newScenarioAst.name = e.target.value\n    this.props.updateFeatureChild(newScenarioAst, this.props.index)\n  }\n\n  editStep(stepAst, index) {\n    let newScenarioAst = Object.assign(this.props.scenario)\n    newScenarioAst.steps[index] = stepAst\n    this.props.updateFeatureChild(newScenarioAst, this.props.index)\n  }\n\n  _addStep() {\n    let newScenarioAst = Object.assign(this.props.scenario)\n    const scenarioLength = this.props.scenario.steps.length,\n          lastStep = this.props.scenario.steps[scenarioLength - 1]\n\n    let newStepLocation = null\n\n    if (!lastStep) {\n      const scenarioLocation = this.props.scenario.location\n      newStepLocation = { line: scenarioLocation.line, column: scenarioLocation.column + 2 }\n    } else {\n      newStepLocation = lastStep.location\n    }\n\n    this.props.addNewStepLine(newStepLocation)\n  }\n\n  addStep() {\n    let newStepAst = {\n      id: IdGenerator.uuid(),\n      keyword: \"* \",\n      location: {line: null, column: null},\n      text: \"\",\n      argument: undefined,\n    }\n\n    let newScenarioAst = Object.assign(this.props.scenario)\n    newScenarioAst.steps.push(newStepAst)\n    this.props.updateFeatureChild(newScenarioAst, this.props.index)\n  }\n}\n","import React from 'react';\nimport Title from './feature-editor/title/Title'\nimport Scenario from './feature-editor/scenario/Scenario'\nimport { IdGenerator } from '@cucumber/messages'\n\nexport default class FeatureEditor extends React.Component {\n  constructor(props) {\n    super(props)\n    this.onUpdateFeatureName = this.updateFeatureName.bind(this)\n    this.onUpdateFeatureChild = this.updateFeatureChild.bind(this)\n    this.onAddNewScenario = this.createNewScenario.bind(this)\n  }\n\n  render() {\n    const scenarioList = this.featureScenarios().map((sc, index) =>\n      <>\n        <Scenario scenario={sc.scenario} index={index} updateFeatureChild={this.onUpdateFeatureChild}/>\n        <button class=\"btn--main\" onClick={() => this.onAddNewScenario(index, false)}>Add scenario</button>\n        <button class=\"btn--main\" onClick={() => this.onAddNewScenario(index, true)}>Add scenario outline</button>\n      </>\n    )\n\n    return (\n      <div className=\"visual-editor\">\n        <Title keyword={this.props.ast.feature.keyword} title={this.featureName()} updateFeatureName={this.onUpdateFeatureName}/>\n        <ul>\n          {scenarioList}\n        </ul>\n      </div>\n    )\n  }\n\n  featureName() {\n    return this.props.ast.feature.name\n  }\n\n  featureScenarios() {\n    return this.props.ast.feature.children\n  }\n\n  updateFeatureName(newName) {\n    let updatedAst = Object.assign(this.props.ast)\n    updatedAst.feature.name = newName\n\n    this.props.onAstUpdated(updatedAst)\n  }\n\n  updateFeatureChild(childAst, index) {\n    let updatedAst = Object.assign(this.props.ast)\n    updatedAst.feature.children[index] = {scenario: childAst}\n\n    this.props.onAstUpdated(updatedAst)\n  }\n\n  createNewScenario(index, isOutline) {\n    let updatedAst = Object.assign(this.props.ast)\n\n    let newScenarioAst = {\n      examples: [],\n      id: IdGenerator.uuid(),\n      keyword: (isOutline)? 'Scenario Outline' : 'Scenario',\n      location: { line: null, column: null },\n      name: \"\",\n      steps: [],\n      tags: []\n    }\n\n    updatedAst.feature.children.splice(index + 1, 0, { scenario: newScenarioAst })\n\n    this.props.onAstUpdated(updatedAst)\n  }\n}","import React from 'react'\n\nexport default class FeatureRenderer extends React.Component {\n  render() {\n    return <div className=\"text-renderer\">\n      <textarea value={this.props.txtDefinition} rows=\"20\" readonly=\"true\"/>\n    </div>\n  }\n}","import React from 'react'\nimport './App.sass'\nimport FeatureEditor from './FeatureEditor'\nimport FeatureRenderer from './FeatureRenderer'\nimport { IdGenerator } from '@cucumber/messages'\nimport { AstBuilder, Parser } from '@cucumber/gherkin'\nimport { pretty } from '@cucumber/gherkin-utils'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    const featureTxt = [\n      \"Feature:\",\n      \"Scenario:\",\n    ].join(\"\\n\")\n\n    const featureAst = this.computeAst(featureTxt)\n\n    this.state = {\n      txtDefinition: featureTxt,\n      ast: featureAst\n    }\n\n    this.onAstUpdated = this.updateAst.bind(this)\n  }\n\n  render() {\n    return (\n      <div className=\"l-app\">\n        <FeatureEditor ast={this.state.ast} onAstUpdated={this.onAstUpdated} addNewScenario={this.onAddNewScenario}/>\n        <FeatureRenderer txtDefinition={this.state.txtDefinition}/>\n      </div>\n    )\n  }\n\n  computeAst(textDef) {\n    const newId = IdGenerator.uuid()\n    const parser = new Parser(new AstBuilder(newId))\n    const gherkinDocument = parser.parse(textDef)\n    gherkinDocument.uri = ''\n\n    return gherkinDocument\n  }\n\n  updateAst(newAst) {\n    const newTxtDefinition = pretty(newAst)\n\n    this.setState({\n      ast: newAst,\n      txtDefinition: newTxtDefinition\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nWebFont.load({\n  google: {\n    families: ['Open Sans:300,400,600', 'sans-serif']\n  }\n});"],"sourceRoot":""}