{"version":3,"sources":["feature-editor/title/Title.js","feature-editor/scenario/steps/Annotation.js","feature-editor/scenario/steps/Text.js","feature-editor/scenario/steps/Step.js","feature-editor/scenario/Scenario.js","FeatureEditor.js","FeatureRenderer.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","handleUpdateFeatureName","updateFeatureName","bind","this","keyword","defaultValue","title","onBlur","e","target","value","React","Component","Annotation","handleChange","state","annotation","slice","trim","newAnnotation","setState","onAnnotationChange","type","name","list","onChange","id","Text","text","onTextChange","Step","editStepAnnotation","editStepText","step","newStepAst","Object","assign","onEditStep","index","Scenario","onEditScenarioName","editScenarioName","editStep","addStep","scenarioHeader","scenarioSteps","onClick","scenario","console","log","steps","map","newScenarioAst","updateFeatureChild","stepAst","scenarioLength","length","lastStep","newStepLocation","location","scenarioLocation","line","column","addNewStepLine","IdGenerator","uuid","argument","undefined","push","FeatureEditor","onUpdateFeatureName","onUpdateFeatureChild","scenarioList","featureScenarios","sc","className","ast","feature","featureName","addNewScenario","children","newName","updatedAst","onAstUpdated","childAst","FeatureRenderer","txtDefinition","rows","readonly","App","featureTxt","join","featureAst","computeAst","updateAst","onAddNewScenario","textDef","newId","gherkinDocument","Parser","AstBuilder","parse","uri","newAst","newTxtDefinition","pretty","defAsArray","split","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b94af8d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Title extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleUpdateFeatureName = this.updateFeatureName.bind(this)\n  }\n\n  render() {\n    return (\n      <h1>\n        {this.props.keyword}: <input defaultValue={this.props.title} onBlur={this.handleUpdateFeatureName}/>\n      </h1>\n    )\n  }\n\n  updateFeatureName(e) {\n    this.props.updateFeatureName(e.target.value)\n  }\n}","import React from 'react'\n\nexport default class Annotation extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      value: props.annotation.slice().trim()\n    }\n  }\n\n  handleChange(e) {\n    let newAnnotation = e.target.value\n\n    if (newAnnotation.trim() === \"\") {\n      this.setState({\n        value: this.props.annotation.slice().trim()\n      })\n      return\n    }\n\n    this.setState({\n      value: newAnnotation\n    })\n\n    this.props.onAnnotationChange(newAnnotation)\n  }\n\n  render() {\n    return (\n      <span>\n        <input type=\"text\" value={this.state.value}\n        name=\"annotation\"\n        list=\"annotations\" onChange={e => this.setState({ value: e.target.value })} onBlur={this.handleChange}/>\n\n        <datalist id=\"annotations\">\n          <select>\n            <option value=\"Given\"/>\n            <option value=\"When\"/>\n            <option value=\"And\"/>\n            <option value=\"Then\"/>\n          </select>\n        </datalist>\n      </span>\n    )\n  }\n}","import React from 'react'\n\nexport default class Text extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  render() {\n    return (<span>\n      <input type=\"text\" defaultValue={this.props.text.trim()} name=\"text\" onBlur={this.handleChange}/>\n    </span>)\n  }\n\n  handleChange(e) {\n    this.props.onTextChange(e.target.value)\n  }\n}","import React from 'react'\nimport Annotation from './Annotation'\nimport Text from './Text'\n\nexport default class Step extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.onAnnotationChange = this.editStepAnnotation.bind(this)\n    this.onTextChange = this.editStepText.bind(this)\n  }\n\n  render() {\n    return (\n      <li>\n          <Annotation annotation={this.props.step.keyword} onAnnotationChange={this.onAnnotationChange} />\n          <Text text={this.props.step.text} onTextChange={this.onTextChange}/>\n      </li>\n    )\n  }\n\n  editStepAnnotation(annotation) {\n    const newStepAst = Object.assign(this.props.step)\n    newStepAst.keyword = annotation + ' '\n    this.props.onEditStep(newStepAst, this.props.index)\n  }\n\n  editStepText(text) {\n    const newStepAst = Object.assign(this.props.step)\n    newStepAst.text = text\n    this.props.onEditStep(newStepAst, this.props.index)\n  }\n}","import React from 'react'\nimport ScenarioStep from './steps/Step'\nimport { IdGenerator } from '@cucumber/messages'\nexport default class Scenario extends React.Component {\n  constructor(props) {\n    super(props)\n    this.onEditScenarioName = this.editScenarioName.bind(this)\n    this.onEditStep = this.editStep.bind(this)\n    this.addStep = this.addStep.bind(this)\n  }\n\n  render() {\n    return (\n      <li>\n        {this.scenarioHeader()}\n        <ul>\n          {this.scenarioSteps()}\n          <button onClick={this.addStep}>+ Add step</button>\n        </ul>\n      </li>\n    )\n  }\n\n  scenarioHeader() {\n    return <h2>\n      {this.props.scenario.keyword}: <input defaultValue={this.props.scenario.name} onBlur={this.onEditScenarioName}/>\n    </h2>\n  }\n\n  scenarioSteps() {\n    console.log(this.props.scenario.steps)\n    return this.props.scenario.steps.map((step, index) =>\n      <ScenarioStep step={step} index={index} onEditStep={this.onEditStep}/>\n    )\n  }\n\n  editScenarioName(e) {\n    let newScenarioAst = Object.assign(this.props.scenario)\n    newScenarioAst.name = e.target.value\n    this.props.updateFeatureChild(newScenarioAst, this.props.index)\n  }\n\n  editStep(stepAst, index) {\n    let newScenarioAst = Object.assign(this.props.scenario)\n    newScenarioAst.steps[index] = stepAst\n    this.props.updateFeatureChild(newScenarioAst, this.props.index)\n  }\n\n  _addStep() {\n    let newScenarioAst = Object.assign(this.props.scenario)\n    const scenarioLength = this.props.scenario.steps.length,\n          lastStep = this.props.scenario.steps[scenarioLength - 1]\n\n    let newStepLocation = null\n\n    if (!lastStep) {\n      const scenarioLocation = this.props.scenario.location\n      newStepLocation = { line: scenarioLocation.line, column: scenarioLocation.column + 2 }\n    } else {\n      newStepLocation = lastStep.location\n    }\n\n    this.props.addNewStepLine(newStepLocation)\n  }\n\n  addStep() {\n    let newStepAst = {\n      id: IdGenerator.uuid(),\n      keyword: \"* \",\n      location: {line: null, column: null},\n      text: \"\",\n      argument: undefined,\n    }\n\n    let newScenarioAst = Object.assign(this.props.scenario)\n    newScenarioAst.steps.push(newStepAst)\n    this.props.updateFeatureChild(newScenarioAst, this.props.index)\n  }\n}\n","import React from 'react';\nimport Title from './feature-editor/title/Title'\nimport Scenario from './feature-editor/scenario/Scenario'\n\nexport default class FeatureEditor extends React.Component {\n  constructor(props) {\n    super(props)\n    this.onUpdateFeatureName = this.updateFeatureName.bind(this)\n    this.onUpdateFeatureChild = this.updateFeatureChild.bind(this)\n  }\n\n  render() {\n    const scenarioList = this.featureScenarios().map((sc, index) =>\n      <Scenario scenario={sc.scenario} index={index} updateFeatureChild={this.onUpdateFeatureChild}/>\n    )\n    return (\n      <div className=\"visual-editor\">\n        <Title keyword={this.props.ast.feature.keyword} title={this.featureName()} updateFeatureName={this.onUpdateFeatureName}/>\n        <ul>\n          {scenarioList}\n          <button onClick={this.props.addNewScenario}>+ Add scenario</button>\n        </ul>\n      </div>\n    )\n  }\n\n  featureName() {\n    return this.props.ast.feature.name\n  }\n\n  featureScenarios() {\n    return this.props.ast.feature.children\n  }\n\n  updateFeatureName(newName) {\n    let updatedAst = Object.assign(this.props.ast)\n    updatedAst.feature.name = newName\n\n    this.props.onAstUpdated(updatedAst)\n  }\n\n  updateFeatureChild(childAst, index) {\n    let updatedAst = Object.assign(this.props.ast)\n    updatedAst.feature.children[index] = {scenario: childAst}\n\n    this.props.onAstUpdated(updatedAst)\n  }\n}","import React from 'react'\n\nexport default class FeatureRenderer extends React.Component {\n  render() {\n    return <div className=\"text-renderer\">\n      <textarea value={this.props.txtDefinition} rows=\"20\" readonly=\"true\"/>\n    </div>\n  }\n}","import React from 'react'\nimport './App.scss'\nimport FeatureEditor from './FeatureEditor'\nimport FeatureRenderer from './FeatureRenderer'\nimport { IdGenerator } from '@cucumber/messages'\nimport { AstBuilder, Parser } from '@cucumber/gherkin'\nimport { pretty } from '@cucumber/gherkin-utils'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    const featureTxt = [\n      \"Feature:\",\n      \"\",\n      \"  Scenario:\",\n      \"    Given something\"\n    ].join(\"\\n\")\n\n    const featureAst = this.computeAst(featureTxt)\n\n    this.state = {\n      txtDefinition: featureTxt,\n      ast: featureAst\n    }\n\n    this.onAstUpdated = this.updateAst.bind(this)\n    this.onAddNewScenario = this.addNewScenario.bind(this)\n  }\n\n  render() {\n    return (\n      <div className=\"l-app\">\n        <FeatureEditor ast={this.state.ast} onAstUpdated={this.onAstUpdated} addNewScenario={this.onAddNewScenario}/>\n        <FeatureRenderer txtDefinition={this.state.txtDefinition}/>\n      </div>\n    )\n  }\n\n  computeAst(textDef) {\n    const newId = IdGenerator.uuid()\n    const parser = new Parser(new AstBuilder(newId))\n    const gherkinDocument = parser.parse(textDef)\n    gherkinDocument.uri = ''\n\n    return gherkinDocument\n  }\n\n  updateAst(newAst) {\n    const newTxtDefinition = pretty(newAst)\n\n    this.setState({\n      ast: newAst,\n      txtDefinition: newTxtDefinition\n    })\n  }\n\n  addNewScenario() {\n    console.log(this.state.ast)\n    let newTxtDefinition = Object.assign(this.state.txtDefinition)\n    let defAsArray = newTxtDefinition.split(\"\\n\")\n\n    defAsArray.push(\"  Scenario: \\n\")\n    newTxtDefinition = defAsArray.join(\"\\n\")\n\n    this.setState({\n      ast: this.computeAst(newTxtDefinition),\n      txtDefinition: newTxtDefinition\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}